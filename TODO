Project:  Make PDFs generated by dvips with Type 3 bitmap fonts
support searching and copying text.

Status:  Works well for English-language text in Acrobat Reader,
Chrome PDF viewer, and OSX Preview.

# Introduction

In the spring of 2019 I was surprised to hear that PDFs generated
by TeX and dvips and ps2pdf did not support searching or copying
text.  Admittedly this is a rare path these days; most people are
using pdfTeX or using Type 1 fonts with dvips, but at least one
prominent user continues to use bitmap fonts.

There's no particularly good reason that PDF files generated from
PostScript with Type 1 fonts should be more searchable than PDF
files generated with bitmapped fonts---and I believe I've resolved
that particular issue at this point.  But going through PostScript
appears to restrict the ability to support other languages.

This github repository contains the experimental code I generated
in trying out ideas.  The companion repository 
https://github.com/rokicki/texlive-source is a fork of the TeXlive
source that contains the proposed limited changes to dvips to make
this work.

# Current Status

I have completed the changes to dvips (except for fully
documenting the implementation).  I also have the experimental
code in this directory so you can see the impact without
needing to rebuild dvips.

Right now, searching and copying text from English-language text
in TeX documents processed with dvips and bitmap fonts and
then through ps2pdf appears to work well.  This is on par with
what happens with dvips when using Type 1 fonts.

Other languages do not work as well.  Accents show up as two
individual characters (and it is unpredictable whether the accent
precedes or follows the base letter).  While many composite or
non-English characters (like the fi ligature or the OE glyph or
the German Eszett or most Greek letters) work properly, some
(Cyrillic) do not.  Cutting and pasting tables works poorly (and
very differently across PDF renderers) but this is the case with
Type 1 fonts anyway.  Math fails almost completely.

Since the only bitmapped fonts that are generally used are from
Metafont sources, and these are almost completely dominated by
Computer Modern, and Computer Modern works well, perhaps this is
where we should let things stand.

# Things that need doing

Make the new dvips functionality a command-line and
configuration-time option.

Test pkfix (or other tools that replace bitmaps with Type 1 fonts)
to ensure they are not broken.

Test more PDF renderers.  Test ancient PostScript renderers (original
LaserWriter?).

Do more bit-for-bit tests between old and new dvips.

Should we consider the memory usage of the new setup?

# Chronological Notes

When I first started this, I thought it was going to be easy; just put
a proper Encoding vector on the bitmap fonts and all the PDF viewers
would do the right thing.  That was not to be.

But even to get the encoding required me to do a little bit of work.
Since PDF with Type 1 versions of the CM fonts worked properly, and
to maximize compatibility, I decided to pull the encoding vectors
directly from the Type 1 fonts supplied with TeXlive.  This was easy
to do with a little bit of Perl.  Those encoding vectors include
some re-encodings of some characters, presumably to make the fonts
more useful in ISO-8859-1 or related environments; since dvips will
never use those duplicated character positions because they don't
exist in the TFM files or bitmapped fonts, I removed those.  This
gave me a set of encodings, one per bitmapped font.  I generated these
for all the AMS-supplied type-1 fonts (under type1/public/amsfonts);
this included all Computer Modern fonts, the LaTeX line and circle
drawing fonts, the Euler fonts, the AMS extra symbol fonts, the
extra Computer Modern fonts, and the Cyrillic fonts.  I modified dvips
to use the appropriate encoding for downloaded fonts, and tried
previewing.  You can test this on your own dvi files with a command
such as the following:

    perl fakedvips.pl --nofontbb --noscale yourdvibasename

and viewing the resulting PDF in your favorite viewer.

Tools to use to test:

   ps2pdf (based on ghostview)
   pstopdf (Apple OSX)
   pdftopng (Glyph and Cog/xpdf) -- warns if font bounding box is "wrong"
   gs with png output driver
